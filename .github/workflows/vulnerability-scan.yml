name: vulnerability-scan
run-name: Scan published images for vulnerabilities.
env:
  REGISTRY: ghcr.io
on:
  push:
    branches:
      - 'build/**'
  schedule:
    - cron: '14 0 * * 4'
jobs:
  vulnerability-scan-schedule:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        images: ${{ fromJson(vars.IMAGES) }}
        branches: ${{ fromJson(vars.BRANCHES) }}
        exclude:
          - images: ci-builder
            branches: 4.x
          - images: clamav
            branches: 4.x
          - images: elasticsearch
            branches: 4.x
          - images: mailhog
            branches: 4.x
          - images: mariadb
            branches: 4.x
          - images: nginx
            branches: 4.x
          - images: php-cli
            branches: 4.x
          - images: php-fpm
            branches: 4.x
          - images: ripple-static
            branches: 4.x
    steps:
      - name: Scan for vulnerabilities
        id: scan
        uses: crazy-max/ghaction-container-scan@v2
        with:
          image: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.images }}:${{matrix.branches}}
          dockerfile: ./images/${{ matrix.images }}
      - name: Upload SARIF file
        if: ${{ steps.scan.outputs.sarif != '' }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

  vulnerability-scan-build:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        images: ${{ fromJson(vars.IMAGES) }}
        branches: ["${{ github.ref_name }}"]
    steps:
      - name: Scan for vulnerabilities
        id: scan
        uses: crazy-max/ghaction-container-scan@v2
        with:
          image: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.images }}:${{matrix.branches}}
          dockerfile: ./images/${{ matrix.images }}
      - name: Upload SARIF file
        if: ${{ steps.scan.outputs.sarif != '' }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
